"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkData = exports.getUser = exports.getTagNameById = exports.getTag = void 0;
const tags_1 = require("./utils/tags");
const feed_1 = require("./utils/feed");
const user_1 = require("./utils/user");
const works_1 = require("./utils/works");
const axios_1 = __importDefault(require("axios"));
const axios_cache_adapter_1 = require("axios-cache-adapter");
axios_1.default.defaults.cache = (0, axios_cache_adapter_1.setupCache)({
    maxAge: 15 * 60 * 1000,
});
const getTag = async ({ tagName, }) => {
    const tagPage = await (0, tags_1.getTagPage)(tagName);
    const worksPage = await (0, works_1.getWorksPage)(tagName);
    return {
        name: tagName,
        id: (0, works_1.getTagId)(worksPage),
        category: (0, tags_1.getTagCategory)(tagPage),
        canonical: (0, tags_1.isCanonical)(tagPage),
        common: (0, tags_1.isCommon)(tagPage),
        canonicalName: (0, tags_1.getCanonical)(tagPage),
    };
};
exports.getTag = getTag;
const getTagNameById = async ({ tagId }) => {
    return (0, feed_1.getTagNameFromFeed)(await (0, feed_1.getFeedPage)({ tagId }));
};
exports.getTagNameById = getTagNameById;
const getUser = async ({ userName, }) => {
    const profilePage = await (0, user_1.getProfile)(userName);
    return {
        name: (0, user_1.getProfileName)(profilePage),
        pseuds: (0, user_1.getProfilePseuds)(profilePage),
        id: (0, user_1.getProfileID)(profilePage),
        joined: (0, user_1.getProfileJoined)(profilePage),
        email: (0, user_1.getProfileEmail)(profilePage),
        location: (0, user_1.getProfileLocation)(profilePage),
        birthday: (0, user_1.getProfileBday)(profilePage),
        url: (0, user_1.getProfileLink)(userName),
        bioHtml: (0, user_1.getProfileBio)(profilePage),
    };
};
exports.getUser = getUser;
// TODO: rename this something like "extractWorkDataFromUrl" to make it explicit
// that no network call is involved.
const getWorkData = ({ url, }) => {
    var _a, _b;
    return {
        workId: url.match(/works\/(\d+)/)[1],
        chapterId: (_a = url.match(/chapters\/(\d+)/)) === null || _a === void 0 ? void 0 : _a[1],
        collectionName: (_b = url.match(/collections\/(\w+)/)) === null || _b === void 0 ? void 0 : _b[1],
    };
};
exports.getWorkData = getWorkData;
